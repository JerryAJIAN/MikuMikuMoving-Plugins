<#@ template hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".Generated.cs" #>
<#

var lines = File.ReadLines(Path.Combine(Path.GetDirectoryName(this.Host.TemplateFile), @"..\..\GetMmdTransformationProxy\MMDExport.h"))
				.Where(_ => _.TrimStart().StartsWith("_EXPORT"))
				.Select(_ => _.Substring(9).Split(new[] { "//" }, StringSplitOptions.None).First().Trim().TrimEnd(')', ';').Split(new[] { ' ', '\t', '(', ',' }, StringSplitOptions.RemoveEmptyEntries))
				.Select(_ => new
				{
					ReturnType = _[0],
					Name = _[1],
					DelegateName = _[1] + "Proc",
					Arguments = _.Skip(2).ToArray(),
					ArgumentDefinitions = string.Join(", ", _.Skip(2).Select((__, idx) => "int arg" + (idx + 1))),
					ArgumentString = string.Join(", ", _.Skip(2).Select((__, idx) => "args[" + idx + "]")),
				})
				.Where(_ => new[] { "char*", "int", "float", "bool", "D3DMATRIX" }.Contains(_.ReturnType))
				.ToArray();

#>
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.IO.Pipes;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;
using DxMath;

namespace Linearstar.MikuMikuMoving.GetMmdTransformationPlugin
{
	partial class MmdImport
	{
<# foreach (var i in lines)
{
	var returnType = i.ReturnType;

	switch (returnType)
	{
		case "char*":
			returnType = "string";
			
			break;
		case "D3DMATRIX":
			returnType = "Matrix";

			break;
	}
#>
		public <#=returnType #> <#=i.Name #>(<#=i.ArgumentDefinitions #>)
		{
			return InvokeRemote<<#=returnType #>>("<#=i.Name #>", new int[] { <#=string.Join(", ", i.Arguments.Select((_, idx) => "arg" + (idx + 1))) #> });
		}

<# } #>
	}
}